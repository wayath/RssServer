FORMAT: 1A
HOST: http://romain-zanchi.com:4498/api
VERSION: 0.1.420

# Java rss

Documentation API java RSS


## Register [/register]

### Register [POST]
Creer un utilisateur.
+ Request (application/json)

          {
              username: "username",
              password: "password"
          }


+ Response 400 (application/json)

          {
              message: "bad_params"
          }
+ Response 400 (application/json)

          {
              message: "already_exists"
          }
+ Response 200 (application/json)

          {
              message: "success"
          }


## Login [/login]

### Login [POST]
Login
+ Request (application/json)

          {
              username: "username",
              password: "password"
          }


+ Response 400 (application/json)

          {
              message: "bad_params"
          }
+ Response 400 (application/json)

          {
              message: "bad_credentials"
          }
+ Response 200 (application/json)

          {
              token: "token"
          }


## Logout [/logout]

### Logout [POST]
Logout
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 200 (application/json)

          {
              message: "success"
          }


## User [/user/:username]

### Get user [GET]
Récupérer l'utilisateur
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 403 (application/json)

          {
              message: "admin_required"
          }
+ Response 404
+ Response 200 (application/json)

          {
              username: "username",
              type: "admin|user"
          }

### Update user [PUT]
Modifier l'utilisateur
+ Request (application/json)

          {
              username: "username",
              password: "password",
              type: "admin|user (seul un admin peut modifier ce param)"
          }
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 400 (application/json)

          {
              message: "bad_params"
          }
+ Response 400 (application/json)

          {
              message: "already_exists"
          }
+ Response 403 (application/json)

          {
              message: "admin_required"
          }
+ Response 404
+ Response 200 (application/json)

          {
              message: "success"
          }

### Delete user [DELETE]
Supprimer l'utilisateur
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 403 (application/json)

          {
              message: "admin_required"
          }
+ Response 404
+ Response 200 (application/json)

          {
              message: "success"
          }


## Get users [/users]

### Get users [GET]
Récupérer la liste des utilisateurs (admin seulement)
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 403 (application/json)

          {
              message: "admin_required"
          }
+ Response 200 (application/json)

          {
              "users" : [
                  {id: id, username: "username", type: "admin|user"},
                  ...
              ]
          }

## Add feed [/feed]

### Add feed [POST]
S'abonner a un flux
+ Request (application/json)

          {
              name: "name",
              url: "url"
          }
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 400 (application/json)

          {
              message: "bad_params"
          }
+ Response 400 (application/json)

          {
              message: "already_exists"
          }
+ Response 200 (application/json)

          {
              id: id,
              name: "name",
              url: "url",
              new_articles: 420,
              refresh_error: false
          }


## Get feeds [/feeds]

### Get feeds [GET]
Récupérer la liste des flux
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 200 (application/json)

          {
              "feeds" : [
                  {id: id, name: "name", url: "url", refresh_error: false},
                  ...
              ],
              "new_articles": 3
          }


## Get articles [/feeds/articles/:page_number]

### Get articles [GET]
Récupérer une page d'articles (tous les flux)
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 200 (application/json)

          {
              "articles" : [
                  {id: id, feed_id: feed_id, status: "new|read", link: "link", title: "title", preview: "preview", full: "full"},
                  ...
              ]
          }


## Feed [/feed/:feed_id]

### Get feed infos [GET]
Récupérer les infos d'un flux
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 404
+ Response 200 (application/json)

          {
              id: id,
              name: "name",
              url: "url",
              new_articles: 3,
              refresh_error: false
          }

### Update feed infos [PUT]
Update les infos d'un flux
+ Request (application/json)

          {
              name: "name"
          }
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 400 (application/json)

          {
              message: "bad_params"
          }
+ Response 404
+ Response 200 (application/json)

          {
              id: id,
              name: "name",
              url: "url",
              new_articles: 42,
              refresh_error: false
          }

### Delete feed [DELETE]
Supprimer un flux
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 404
+ Response 200 (application/json)

          {
              message: "success"
          }


## Get feed articles [/feed/:feed_id/articles/:page_number]

### Get feed articles [GET]
Récupérer une page d'articles d'un flux
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 404
+ Response 200 (application/json)

          {
              "articles" : [
                  {id: id, feed_id: feed_id, status: "new|read", link: "link", title: "title", preview: "preview", full: "full"},
                  ...
              ]
          }

## Mark feed as read [/feed/as_read/:feed_id]

### Mark feed as read [POST]
Marquer un flux comme lu
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 404
+ Response 200 (application/json)

          {
              message: "success"
          }


## Mark article as read [/article/as_read/:article_id]

### Mark article as read [POST]
Marquer un article comme lu
+ Request (application/json)
      + Headers

          User-token: "token"

+ Response 400 (application/json)

          {
              message: "invalid_token"
          }
+ Response 404
+ Response 200 (application/json)

          {
              message: "success"
          }


## Update a feed [/worker/refresh/feed/:feed_id]

### Update a feed [GET]
Updater un feed
+ Request (application/json)
+ Response 400 (application/json)

          {
              message: "error"
          }
+ Response 200 (application/json)

          {
              message: "success"
          }
